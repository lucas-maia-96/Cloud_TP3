apiVersion: v1
kind: ConfigMap
metadata:
  name: pyfile
  namespace: lucasmaia
data:
  pyfile: |
    import redis
    import json
    from typing import Any, Dict

    def handler(input: Dict[str, Any], context: Any) -> Dict[str, Any]:
        # Obtém a variável persistente do contexto
        env = context.env
        moving_averages = env.get("moving_averages", {})

        # Dados de entrada com verificação de presença das chaves
        prefix = "cpu_percent-"
        cpu_utilizations = [(key[len(prefix):],value) for key, value in input.items() if key.startswith(prefix)]
        cached = input.get("virtual_memory-cached", 0)
        buffers = input.get("virtual_memory-buffers", 0)
        total_memory = input.get("virtual_memory-total", 1)
        bytes_sent = input.get("net_io_counters_eth0-bytes_sent", 0)
        bytes_recv = input.get("net_io_counters_eth0-bytes_recv", 0)

        # Calcula métricas
        percent_network_egress = (float(bytes_sent) / (bytes_sent + bytes_recv) * 100) if (bytes_sent + bytes_recv) > 0 else 0
        percent_memory_cache = (cached + buffers) / total_memory * 100 if total_memory > 0 else 0

        # Calcula a média móvel por CPU
        for utilization in cpu_utilizations:
            key = f"60s-avg-util-cpu{utilization[0]}"
            if key in moving_averages:
                moving_averages[key] = (moving_averages[key] * 59 + utilization[1]) / 60
            else:
                moving_averages[key] = utilization[1]
        
        for utilization in cpu_utilizations:
            key = f"util-cpu{utilization[0]}"
            moving_averages[key] = utilization[1]

        # Atualiza o contexto com as médias móveis
        env["moving_averages"] = moving_averages

        # Retorna os resultados
        result = {
            "percent-network-egress": percent_network_egress,
            "percent-memory-cache": percent_memory_cache,
            **moving_averages,
        }
        return result
